
import java.io.File;
import java.io.FileReader;
import java.io.StringWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import fi.foyt.foursquare.api.io.IOHandler;
import fi.foyt.foursquare.api.io.Method;
import fi.foyt.foursquare.api.io.MultipartParameter;
import fi.foyt.foursquare.api.io.Response;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FoursqaureAPI extends IOHandler {
    
    public static void main(String args[]) throws MalformedURLException, IOException
    {
        FoursqaureAPI test = new FoursqaureAPI();
        String url = "https://api.foursquare.com/v2/venues/explore?near=Yosemite%20National%20Park&section=outdoors&oauth_token=YOUR TOKEN ID&v=20131117";
        

        URL oracle = new URL(url);
        URLConnection yc = oracle.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(yc.getInputStream()));
                                
        String inputLine;
        List<String> all1 = new ArrayList<String>();
        List<String> all2 = new ArrayList<String>();
        List<String> all3 = new ArrayList<String>();
//        Method m=null;
//        test.fetchData(url,m);
        inputLine = in.readLine();
//        while ((inputLine = in.readLine()) != null) 
//            System.out.println(inputLine);
        
        
            Matcher m = Pattern.compile("venue\".\\{.+?name\".\"(.+?)\".+?lat\".(.+?),.+?lng\".(.+?),").matcher(inputLine);
            while(m.find()){
                all1.add(m.group(1));
                all2.add(m.group(2));
                all3.add(m.group(3));
            }
            
            for(int i=0;i<all1.size();i++){
                
                System.out.println(all1.get(i)+" "+all2.get(i)+" "+ all3.get(i));
//                System.out.println(all2.get(i)+" "+ all3.get(i));
//                System.out.println();
            }
            //System.out.println(allMatches);
        in.close();
    
}
    

    @Override
    public Response fetchData(String url, Method method) {
        try {
            StringBuilder searchUrlParametersBuilder = new StringBuilder();

            boolean callback = false;
            
            int queryStart = url.indexOf("?");
            String searchUrl = url.substring(0, queryStart);
            String query = url.substring(queryStart + 1);
            Iterator<String> parameters = Arrays.asList(query.split("&")).iterator();

            while (parameters.hasNext()) {
                String[] p = parameters.next().split("=");

                boolean authToken = "oauth_token".equals(p[0]);

                if (authToken) {
                    if ("null".equals(p[1])) {
                        return new Response("", 401, "Unauthorized");
                    }
                }

                boolean clientParam = "client_id".equals(p[0]) || "client_secret".equals(p[0]);
                boolean versionParam = "v".equals(p[0]);
                boolean callbackParam = "callback".equals(p[0]);

                if (!clientParam && !authToken && !versionParam && !callbackParam) {
                    if (searchUrlParametersBuilder.length() > 0) {
                        searchUrlParametersBuilder.append('&');
                    }
                    searchUrlParametersBuilder.append(p[0] + "=" + p[1]);
                }

                if (callbackParam) {
                    callback = true;
                }
            }

            String searchUrlParameters = searchUrlParametersBuilder.toString();
            if (searchUrlParameters.length() > 0) {
                searchUrl += '?' + searchUrlParameters;
            }

            String path = response.get(searchUrl);
            if (path != null) {
                StringWriter responseWriter = new StringWriter();

                if (callback) {
                    responseWriter.append("c(");
                }

                char[] buf = new char[1024];
                int l = 0;

                File file = new File("C:\\Users\\vishal\\Desktop\\photo management\\data\\" + path);
                FileReader fileReader = new FileReader(file);
                while ((l = fileReader.read(buf)) > 0) {
                    responseWriter.write(buf, 0, l);
                }

                responseWriter.flush();
                responseWriter.close();

                if (callback) {
                    responseWriter.append(");");
                }

                return new Response(responseWriter.getBuffer().toString(), 200, "");
            } else {
                if (callback) {
                    return new Response(
                            "c({meta: { "
                            + "  code: 404, "
                            + "  errorType: \"endpoint_error\", "
                            + "  errorDetail: \"The requested path does not exist.\" "
                            + "}, response: { }});", 200, "");
                } else {
                    return new Response("", 404, "Not Found");
                }
            }
        } catch (Exception e) {
            return new Response("", 500, e.getMessage());
        }
    }

    @Override
    public Response fetchDataMultipartMime(String url, MultipartParameter... params) {
        return fetchData(url, Method.POST);
    }

    private static void setResponse(String url, String responsePath) {
        response.put(url, responsePath);
    }

    private static Map<String, String> response = new HashMap<String, String>();

   }
